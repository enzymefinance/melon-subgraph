type Contract @entity {
  id: ID!
  name: String
  description: String
  createdAt: BigInt
  parent: Contract
  children: [Contract!] @derivedFrom(field: "parent")
}

type State @entity {
  id: ID!
  lastPriceUpdate: BigInt!
  activeFunds: BigInt!
  nonActiveFunds: BigInt!
  timestampFundCount: BigInt!
  activeInvestors: BigInt!
  nonActiveInvestors: BigInt!
  allInvestments: BigInt!
  activeInvestments: BigInt!
  nonActiveInvestments: BigInt!
  lastEngineUpdate: BigInt!
  currentEngine: Engine
  totalAmguConsumed: BigInt!
  totalMlnBurned: BigInt!
  mlnToken: String!
  registry: Registry!
  registries: [Registry!]!
  networkGav: BigInt!
  allTrades: BigInt!
  takeTrades: BigInt!
  makeTrades: BigInt!
  cancelTrades: BigInt!
}

type Registry @entity {
  id: ID!
  timestamp: BigInt!
  owner: String
  engine: Engine
  priceSource: PriceSource
  versions: [Version!]!
  assets: [Asset!]! @derivedFrom(field: "registry")
  exchangeAdapters: [ExchangeAdapter!]! @derivedFrom(field: "registry")
  priceSources: [PriceSource!]! @derivedFrom(field: "registry")
  mlnTokens: [MlnToken!]! @derivedFrom(field: "registry")
  nativeAssets: [NativeAsset!]! @derivedFrom(field: "registry")
  mgms: [MGM!]! @derivedFrom(field: "registry")
  funds: [Fund!]! @derivedFrom(field: "registry")
}

type Version @entity {
  id: ID!
  registry: Registry!
  name: String
  timestamp: BigInt!
  funds: [Fund!]!
}

type Engine @entity {
  id: ID!
  registry: Registry!
  amguPrice: BigInt!
  frozenEther: BigInt!
  liquidEther: BigInt!
  lastThaw: BigInt!
  thawingDelay: BigInt!
  totalEtherConsumed: BigInt!
  totalAmguConsumed: BigInt!
  totalMlnBurned: BigInt!
  premiumPercent: BigInt!
  mlnTotalSupply: BigInt!
  lastUpdate: BigInt!
  history: [EngineHistory!]! @derivedFrom(field: "engine")
  amguPrices: [AmguPrice!]! @derivedFrom(field: "engine")
  amguPayments: [AmguPayment!]! @derivedFrom(field: "engine")
  etherEvents: [EngineEtherEvent!]! @derivedFrom(field: "engine")
}

type EngineHistory @entity {
  id: ID!
  engine: Engine!
  timestamp: BigInt!
  amguPrice: BigInt!
  frozenEther: BigInt!
  liquidEther: BigInt!
  lastThaw: BigInt!
  thawingDelay: BigInt!
  totalEtherConsumed: BigInt
  totalAmguConsumed: BigInt!
  totalMlnBurned: BigInt!
  premiumPercent: BigInt!
  mlnTotalSupply: BigInt!
}

type PriceSource @entity {
  id: ID!
  registry: Registry!
  priceUpdates: [AssetPriceUpdate!] @derivedFrom(field: "priceSource")
}

type MlnToken @entity {
  id: ID!
  registry: Registry!
}

type NativeAsset @entity {
  id: ID!
  registry: Registry!
}

type MGM @entity {
  id: ID!
  registry: Registry!
}

type AmguPrice @entity {
  id: ID!
  engine: Engine!
  price: BigInt!
  timestamp: BigInt!
}

type AmguPayment @entity {
  id: ID!
  engine: Engine!
  amount: BigInt!
  timestamp: BigInt!
}

type EngineEtherEvent @entity {
  id: ID!
  engine: Engine!
  event: String!
  amount: BigInt!
  timestamp: BigInt!
}

type Asset @entity {
  id: ID!
  decimals: Int!
  symbol: String!
  name: String!
  createdAt: BigInt!
  url: String!
  reserveMin: BigInt!
  registry: Registry
  removedFromRegistry: Boolean
  removedFromRegistryAt: BigInt
  lastPrice: BigInt
  lastPriceUpdate: BigInt
  lastPriceValid: Boolean
  priceHistory: [AssetPriceHistory!]! @derivedFrom(field: "asset")
  fundHoldingsHistory: [FundHoldingsHistory!]! @derivedFrom(field: "asset")
  fundAccountings: [Accounting!]!
  melonNetworkAssetHistory: [MelonNetworkAssetHistory!]!
    @derivedFrom(field: "asset")
}

type AssetPriceUpdate @entity {
  id: ID!
  timestamp: BigInt!
  priceSource: PriceSource!
  numberOfAssets: Int!
  invalidPrices: Int!
  numberOfFunds: Int!
  assetPrices: [AssetPriceHistory!]! @derivedFrom(field: "priceUpdate")
}

type AssetPriceHistory @entity {
  id: ID!
  priceUpdate: AssetPriceUpdate!
  asset: Asset!
  price: BigInt!
  timestamp: BigInt!
  priceValid: Boolean!
}

type Exchange @entity {
  id: ID!
  name: String
  adapter: ExchangeAdapter!
  tradings: [Trading!]! @derivedFrom(field: "exchanges")
  calls: [ExchangeMethodCall!]! @derivedFrom(field: "exchange")
  trades: [Trade!]! @derivedFrom(field: "exchange")
}

type ExchangeAdapter @entity {
  id: ID!
  exchange: Exchange!
  takesCustody: Boolean!
  tradings: [Trading!]! @derivedFrom(field: "adapters")
  sigs: String
  registry: Registry
  createdAt: BigInt!
  removedFromRegistry: Boolean
  removedFromRegistryAt: BigInt
}

type Fund @entity {
  id: ID!
  name: String
  slug: FundSlug @derivedFrom(field: "fund")
  manager: FundManager
  createdAt: BigInt
  isShutdown: Boolean
  shutdownAt: BigInt
  accounting: Accounting!
  participation: Participation!
  feeManager: FeeManager!
  policyManager: PolicyManager!
  share: Share!
  trading: Trading!
  vault: Vault!
  priceSource: PriceSource!
  registry: Registry
  version: Version
  engine: Engine
  gav: BigInt
  validPrice: Boolean
  feesInDenominationAsset: BigInt
  feesInShares: BigInt
  nav: BigInt
  sharePrice: BigInt
  currentDailySharePrice: BigInt
  previousDailySharePrice: BigInt
  gavPerShareNetManagementFee: BigInt
  allocatedFees: BigInt
  totalSupply: BigInt
  investments: [Investment!]!
  holdings: [FundHolding!]!
  calculationsHistory: [FundCalculationsHistory!]! @derivedFrom(field: "fund")
  investmentHistory: [InvestmentHistory!]! @derivedFrom(field: "fund")
  holdingsHistory: [FundHoldingsHistory!]! @derivedFrom(field: "fund")
  lastCalculationsUpdate: BigInt
  # events: [EventHistory!]! @derivedFrom(field: "fund")
}

interface Slug {
  id: ID!
}

type FundSlug implements Slug @entity {
  id: ID!
  fund: Fund!
  manager: FundManager!
  version: Version!
  successor: FundSlug
}

type FundManager @entity {
  id: ID!
  createdAt: BigInt!
  funds: [Fund!]! @derivedFrom(field: "manager")
}

type Accounting @entity {
  id: ID!
  fund: Fund
  denominationAsset: Asset!
  nativeAsset: Asset!
  ownedAssets: [Asset!]!
}

type FundCalculationsHistory @entity {
  id: ID!
  fund: Fund!
  gav: BigInt!
  validPrices: Boolean
  feesInDenominationAsset: BigInt
  feesInShares: BigInt
  nav: BigInt
  sharePrice: BigInt
  gavPerShareNetManagementFee: BigInt
  allocatedFees: BigInt
  totalSupply: BigInt
  timestamp: BigInt!
  source: String
}

type FeeManager @entity {
  id: ID!
  fund: Fund
  feesRegistered: BigInt
  managementFee: ManagementFee @derivedFrom(field: "feeManager")
  performanceFee: PerformanceFee @derivedFrom(field: "feeManager")
  totalFeeReward: BigInt!
  feeRewardHistory: [FeeRewardHistory!]! @derivedFrom(field: "feeManager")
}

type ManagementFee @entity {
  id: ID!
  feeManager: FeeManager!
  managementFeeRate: BigInt!
  lastPayoutTime: BigInt
}

type PerformanceFee @entity {
  id: ID!
  feeManager: FeeManager!
  performanceFeeRate: BigInt!
  performanceFeePeriod: BigInt!
  lastPayoutTime: BigInt
  initializeTime: BigInt
  highWaterMark: BigInt
}

type FeeRewardHistory @entity {
  id: ID!
  feeManager: FeeManager!
  shares: BigInt!
  timestamp: BigInt!
}

type Participation @entity {
  id: ID!
  fund: Fund
  allowedAssets: [Asset!]!
}

type PolicyManager @entity {
  id: ID!
  fund: Fund
  policies: [Policy!] @derivedFrom(field: "policyManager")
}

type Policy @entity {
  id: ID!
  policyManager: PolicyManager
  signature: String!
  position: Int!
  identifier: String!
  userWhiteList: [UserWhiteList!] @derivedFrom(field: "policy")
  assetWhiteList: [Asset!]
  assetBlackList: [Asset!]
  maxConcentration: BigInt
  maxPositions: BigInt
  priceTolerance: BigInt
}

type UserWhiteList @entity {
  id: ID!
  policy: Policy!
}

type Share @entity {
  id: ID!
  fund: Fund
}

type Trading @entity {
  id: ID!
  fund: Fund
  exchanges: [Exchange!]!
  adapters: [ExchangeAdapter!]!
  calls: [ExchangeMethodCall!]! @derivedFrom(field: "trading")
  trades: [Trade!]! @derivedFrom(field: "trading")
}

type Vault @entity {
  id: ID!
  fund: Fund
}

type Investor @entity {
  id: ID!
  createdAt: BigInt!
  active: Boolean!
  valuationHistory: [InvestorValuationHistory!]! @derivedFrom(field: "owner")
  investments: [Investment!]!
  investmentRequests: [InvestmentRequest!]! @derivedFrom(field: "owner")
  investmentHistory: [InvestmentHistory!]! @derivedFrom(field: "owner")
}

# ?
type InvestmentRequest @entity {
  id: ID!
  fund: Fund!
  owner: Investor!
  status: String!
  amount: BigInt!
  asset: Asset!
  shares: BigInt!
  requestTimestamp: BigInt!
  updateTimestamp: BigInt
}

type Investment @entity {
  id: ID!
  createdAt: BigInt!
  fund: Fund
  owner: Investor!
  shares: BigInt!
  sharePrice: BigInt
  gav: BigInt!
  nav: BigInt!
  history: [InvestmentHistory!]! @derivedFrom(field: "investment")
  valuationHistory: [InvestmentValuationHistory!]!
    @derivedFrom(field: "investment")
}

type InvestmentValuationHistory @entity {
  id: ID!
  investment: Investment!
  gav: BigInt!
  nav: BigInt!
  sharePrice: BigInt!
  timestamp: BigInt!
}

type InvestorValuationHistory @entity {
  id: ID!
  owner: Investor!
  gav: BigInt!
  nav: BigInt!
  timestamp: BigInt!
}

type InvestmentHistory @entity {
  id: ID!
  timestamp: BigInt!
  investment: Investment!
  owner: Investor!
  fund: Fund!
  action: String!
  shares: BigInt!
  sharePrice: BigInt
  amount: BigInt
  asset: Asset
  amountInDenominationAsset: BigInt
}

type FundHolding @entity {
  id: ID!
  fund: Fund!
  asset: Asset!
  amount: BigInt!
  assetGav: BigInt
  validPrice: Boolean!
}

type FundHoldingsHistory @entity {
  id: ID!
  timestamp: BigInt!
  fund: Fund!
  asset: Asset!
  amount: BigInt!
  assetGav: BigInt
  validPrice: Boolean!
}

type FundCount @entity {
  id: ID!
  active: BigInt!
  nonActive: BigInt!
  timestamp: BigInt!
}

type InvestmentCount @entity {
  id: ID!
  all: BigInt!
  active: BigInt!
  nonActive: BigInt!
  timestamp: BigInt!
}

type InvestorCount @entity {
  id: ID!
  active: BigInt!
  nonActive: BigInt!
  timestamp: BigInt!
}

type MelonNetworkHistory @entity {
  id: ID!
  timestamp: BigInt!
  gav: BigInt!
  validGav: Boolean!
  assetAmounts: [MelonNetworkAssetHistory!]!
    @derivedFrom(field: "melonNetworkHistory")
}

type MelonNetworkAssetHistory @entity {
  id: ID!
  melonNetworkHistory: MelonNetworkHistory!
  timestamp: BigInt!
  asset: Asset!
  amount: BigInt!
  assetGav: BigInt!
  numberOfFunds: Int!
  invalidPrices: Int!
  fundHoldings: [FundHoldingsHistory!]
}

type ExchangeMethodCall @entity {
  id: ID!
  trading: Trading
  exchange: Exchange
  methodSignature: String
  methodName: String
  orderAddress0: String
  orderAddress1: String
  orderAddress2: Asset
  orderAddress3: Asset
  orderAddress4: String
  orderAddress5: String
  orderValue0: BigInt
  orderValue1: BigInt
  orderValue2: BigInt
  orderValue3: BigInt
  orderValue4: BigInt
  orderValue5: BigInt
  orderValue6: BigInt
  orderValue7: BigInt
  identifier: String
  makerAssetData: String
  takerAssetData: String
  signature: String
  timestamp: BigInt!
}

type Trade @entity {
  id: ID!
  trading: Trading!
  exchange: Exchange!
  methodName: String!
  assetSold: Asset
  assetBought: Asset
  amountSold: BigInt
  amountBought: BigInt
  timestamp: BigInt!
  gasUsed: BigInt
  gasPrice: BigInt
}

type TradeCount @entity {
  id: ID!
  all: BigInt!
  make: BigInt!
  take: BigInt!
  cancel: BigInt!
  timestamp: BigInt!
}

type Event @entity {
  id: ID!
  name: String!
  contract: Contract!
  timestamp: BigInt!
  block: BigInt!
  hash: String!
  from: String!
  parameters: [EventParameter!]! @derivedFrom(field: "event")
}

type EventParameter @entity {
  id: ID!
  event: Event!
  name: String!
  kind: BigInt!
  value: String!
  isArray: Boolean!
}
